org: proclame
app: image-handler-imgix-alt
service: image-handler-imgix-alt
variablesResolutionMode: 20210326

provider:
  name: aws
  runtime: nodejs14.x
  timeout: 28
  stage: ${opt:stage,'dev'}
  region: 'eu-central-1'
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:GetObject"
          Resource: "arn:aws:s3:::${self:custom.settings.environment.SOURCE_BUCKET}/*"
  apiGateway:
    shouldStartNameWithService: true
    binaryMediaTypes:
      - '*/*'
  lambdaHashingVersion: "20201221"

layers:
  sharp:
    path: lambdaLayers/SharpLayer # required, path to layer contents on disk
    name: ${self:provider.stage}-sharp # optional, Deployed Lambda layer name
    package:
      include:
        - node_modules/**
    description: sharp@0.32.4
    compatibleRuntimes:
      - nodejs14.x
    licenseInfo: Apache License 2.0
    retain: false

resources:
  Conditions:
    CustomDomain: !Not [!Equals ["${self:custom.settings.environment.CUSTOM_DOMAIN, ''}", ""]]
    ArnCertificate: !Not [!Equals ["${self:custom.settings.environment.ACM_CERTIFICATE_ARN, ''}", ""]]
    CreateCertificate: !And
      - !Not [!Equals ["${self:custom.settings.environment.CUSTOM_DOMAIN, ''}", ""]]
      - !Equals ["${self:custom.settings.environment.ACM_CERTIFICATE_ARN, ''}", ""]
  Resources:
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: Cloudfront distribution for serverless image handler
          DefaultCacheBehavior:
            TargetOriginId: ApiGateway
            ViewerProtocolPolicy: 'redirect-to-https'
            DefaultTTL: 30
            ForwardedValues:
              Headers:
                - 'Accept'
              QueryString: true
          Enabled: true
          HttpVersion: 'http2and3'
          Origins:
            - Id: ApiGateway
              DomainName:
                Fn::Join:
                  - "."
                  - - Ref: ApiGatewayRestApi
                    - execute-api.${self:provider.region}.amazonaws.com
              OriginPath: "/${self:provider.stage}"
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
          Aliases:
            Fn::If:
            - CustomDomain
            - - '${self:custom.settings.environment.CUSTOM_DOMAIN, ""}'
            - Ref: AWS::NoValue
          ViewerCertificate:
            Fn::If:
            - ArnCertificate
            - MinimumProtocolVersion: 'TLSv1'
              SslSupportMethod: 'sni-only'
              AcmCertificateArn: ${self:custom.settings.environment.ACM_CERTIFICATE_ARN,''}
            - Fn::If:
              - CreateCertificate
              - MinimumProtocolVersion: 'TLSv1'
                SslSupportMethod: 'sni-only'
                AcmCertificateArn:
                  Ref: Certificate
              - Ref: AWS::NoValue
    Certificate:
      Type: AWS::CertificateManager::Certificate
      Condition: CreateCertificate
      Properties:
        ValidationMethod: DNS
        DomainName: '${self:custom.settings.environment.CUSTOM_DOMAIN}'
  Outputs:
    CloudFrontDistributionOutput:
      Value:
        'Fn::GetAtt': [ CloudFrontDistribution, DomainName ]
functions:
  index:
    memorySize: 5120
    package:
      individually: true
      exclude:
        - node_modules/**
        - docs/**
        - .idea/**
        - bin/darwin/**
        - coverage/**
    handler: src/index.handler
    layers:
      - { Ref: SharpLambdaLayer }
    events:
      - http:
          path: /{any+}
          method: get
          response:
            contentHandling: CONVERT_TO_BINARY
    environment: ${self:custom.settings.environment}
custom:
  empty: ''
  settingsFilePath: ${opt:settings,'./settings.yml'}
  settings: ${file(${self:custom.settingsFilePath}):stages.${self:provider.stage}}
  serverless-offline:
    httpPort: 3003
    noPrependStageInUrl: true
plugins:
  - serverless-offline
